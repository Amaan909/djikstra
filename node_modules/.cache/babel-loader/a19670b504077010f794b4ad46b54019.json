{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo-Pc\\\\Downloads\\\\dijikstras-main\\\\dijikstras-main\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport logo from 'C:/Users/suraj/Desktop/pathFinder/Pathfinding/src/PathfindingVisualizer/gfg-new-logo.png';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      width: \"100\",\n      height: \"50\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","logo","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","width","height","onClick","map","rowIdx","key","nodeIdx","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["C:/Users/Lenovo-Pc/Downloads/dijikstras-main/dijikstras-main/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport logo from 'C:/Users/suraj/Desktop/pathFinder/Pathfinding/src/PathfindingVisualizer/gfg-new-logo.png';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n      <div className=\"logo\">\n          <img src={logo} width=\"100\" height=\"50\" />\n        </div>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                \n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n\n                    \n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                      \n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}